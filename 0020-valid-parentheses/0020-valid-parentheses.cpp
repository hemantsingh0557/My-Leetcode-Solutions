






// //
// // // // // // //  Solve Using  Only One  Method  ===>     
// // // // // // //  Solve Using  Only One  Method  ===>                        
// //                     
// //                     
// // //  1st Method  ====>  Using Stack   TC = O(n) , SC = O(n) constant
// //                      
// //                      
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////



// class Solution {
// public:
//     bool isValid(string s)  {
//     }
// };



/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////









// //                           
// //                           
// // //  1st Method    ======>   Using Stack
// // //  1st Method    ======>   Using Stack
// // //  1st Method    ======>   Using Stack
// //                             
// // //   Time Complexity   = O(n)   
// //                              
// // //   Space Complexity  = O(n)   
// //                               




class Solution {
public:

    bool isValid(string s) 
    {
        int n = s.size() ;
        unordered_map<char,int> mp = { {'[' , -3} , {'{' , -2} , {'(' , -1} , {')' , 1} , {'}' , 2} , {']' , 3} }; 
        stack<int> st ;
        for(int i=0; i< n; i++)
        {
            if( mp[s[i]] < 0 ) st.push(s[i]) ;
            else if(st.size() && mp[st.top()]+mp[s[i]]==0) st.pop() ;
            else return false  ;
        }
        return st.empty() ;
    }
};



















































